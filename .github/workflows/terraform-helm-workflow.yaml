name: Terraform and Helm Workflow

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Set true to destroy resources after apply'
        required: true
        default: 'false'
  push:
    branches:
      - main

jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      terraform: ${{ steps.filter.outputs.terraform }}
      charts: ${{ steps.filter.outputs.charts }}
    steps:
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          terraform:
            - 'terraform/**'
          charts:
            - 'charts/**'
  terraform:
    name: Apply and Destroy Terraform
    needs: changes
    if: ${{ needs.changes.outputs.terraform == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.5"

      - name: Terraform Init
        run: terraform init -reconfigure
        working-directory: terraform

      - name: Check for changes in /terraform
        id: check-changes
        run: |
          git diff --exit-code HEAD^ HEAD terraform || echo "Changes detected"
        working-directory: terraform

      - name: Apply Terraform
        if: ${{ github.event.inputs.destroy == 'false'}}
        run: terraform apply --var-file=var.tfvars --auto-approve
        working-directory: terraform

      - name: Destroy Terraform (Conditional)
        if: ${{ github.event.inputs.destroy == 'true'}}
        run: terraform destroy -auto-approve
        working-directory: terraform

  eks-cluster-1a:
    name: Install Redis Helm Chart on eks-cluster-1a
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.charts == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Configure kubectl
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks-cluster-1a
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
      
      - name: Helm Install or Upgrade Redis
        run: |
          if helm ls -n redis-cluster | grep redis-cluster-a; then
            echo "Release found. Upgrading..."
            helm upgrade --timeout 600s redis-cluster-a ./charts -f ./charts/values_a.yaml -n redis-cluster --set password=${{ secrets.REDIS_PASSWORD }}
          else
            echo "Release not found. Installing..."
            helm install redis-cluster-a ./charts -f ./charts/values_a.yaml -n redis-cluster --create-namespace --set global.redis.password=${{ secrets.REDIS_PASSWORD }}
          fi
        env:
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

  eks-cluster-1b:
    name: Install Redis Helm Chart on eks-cluster-1b
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.charts == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Configure kubectl
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks-cluster-1b
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
      
      - name: Helm Install or Upgrade Redis
        run: |
          if helm ls -n redis-cluster | grep redis-cluster-b; then
            echo "Release found. Upgrading..."
            helm upgrade --timeout 600s redis-cluster-b ./charts -f ./charts/values_b.yaml -n redis-cluster --set password=${{ secrets.REDIS_PASSWORD }}
          else
            echo "Release not found. Installing..."
            helm install redis-cluster-b ./charts -f ./charts/values_b.yaml -n redis-cluster --create-namespace --set global.redis.password=${{ secrets.REDIS_PASSWORD }}
          fi
        env:
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
